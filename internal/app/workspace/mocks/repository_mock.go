// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/workspace/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	datamodel "konntent-workspace-service/internal/app/datamodel"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddWorkspace mocks base method.
func (m_2 *MockRepository) AddWorkspace(c context.Context, m *datamodel.Workspace) (*datamodel.Workspace, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "AddWorkspace", c, m)
	ret0, _ := ret[0].(*datamodel.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWorkspace indicates an expected call of AddWorkspace.
func (mr *MockRepositoryMockRecorder) AddWorkspace(c, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkspace", reflect.TypeOf((*MockRepository)(nil).AddWorkspace), c, m)
}

// GetUserWorkspace mocks base method.
func (m_2 *MockRepository) GetUserWorkspace(c context.Context, m datamodel.UserWorkspace) (*datamodel.Workspace, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetUserWorkspace", c, m)
	ret0, _ := ret[0].(*datamodel.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWorkspace indicates an expected call of GetUserWorkspace.
func (mr *MockRepositoryMockRecorder) GetUserWorkspace(c, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWorkspace", reflect.TypeOf((*MockRepository)(nil).GetUserWorkspace), c, m)
}

// GetUserWorkspaces mocks base method.
func (m_2 *MockRepository) GetUserWorkspaces(c context.Context, m datamodel.UserWorkspace) ([]datamodel.Workspace, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetUserWorkspaces", c, m)
	ret0, _ := ret[0].([]datamodel.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWorkspaces indicates an expected call of GetUserWorkspaces.
func (mr *MockRepositoryMockRecorder) GetUserWorkspaces(c, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWorkspaces", reflect.TypeOf((*MockRepository)(nil).GetUserWorkspaces), c, m)
}
